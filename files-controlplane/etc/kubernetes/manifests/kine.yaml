apiVersion: v1
kind: Pod
metadata:
  name: kine
  namespace: kube-system
  labels:
    app.kubernetes.io/name: kine
    app.kubernetes.io/component: kine
    app.kubernetes.io/part-of: control-plane
    tier: control_plane
spec:
  hostNetwork: true
  priorityClassName: system-node-critical
  containers:
    - name: kine-postgres
      image: docker.io/postgres:15.7-alpine@sha256:0cec11eaf51a9af24c27a09cae9840a9234336e5bf9edc5fdf67b3174ba05210
      imagePullPolicy: IfNotPresent
      args:
        - -c
        - listen_addresses=127.0.0.1
        - -c
        - shared_buffers=256MB  # Cached data. Default: 128MB
      env:
        - name: POSTGRES_USER
          value: kubernetes
        - name: POSTGRES_DB
          value: kubernetes
        - name: POSTGRES_PASSWORD
          value: kubernetes
      volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-data
        - mountPath: /var/run/postgresql/
          name: socket
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
      readinessProbe:
        failureThreshold: 1
        periodSeconds: 5
        exec:
          command:
            - sh
            - -c
            - pg_isready --username=$POSTGRES_USER --dbname=$POSTGRES_DB --timeout=1
    - name: kine-kine
      image: docker.io/rancher/kine:v0.11.10-amd64
      imagePullPolicy: IfNotPresent
      securityContext:
        # kine runs as nobody by default, but on this configuration it needs to read certs from /etc/kubernetes/pki,
        # which are root:root owned.
        runAsUser: 0
      args:
        - --listen-address=0.0.0.0:2379  # Kine logs will say it is listening on localhost only. Don't believe its lies.
        - --metrics-bind-address=0.0.0.0:8080
        - --endpoint=postgres://kubernetes:kubernetes@/kubernetes?host=/socket
        - --server-cert-file=/pki/server.crt
        - --server-key-file=/pki/server.key
        - --slow-sql-threshold=3s
        - --datastore-max-open-connections=20  # We run on a CPU-bound server, try to not stress postgres too much.
      ports:
        - containerPort: 2379
          name: etcd
        - containerPort: 8080
          name: metrics
      resources:
        requests:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - mountPath: /pki
          name: etcd-pki
        - mountPath: /socket
          name: socket
  volumes:
    - name: socket
      hostPath:  # This could be an EmptyDir, but on my tests they have been unreliable for static pods.
        path: /run/kine/postgresql/
        type: DirectoryOrCreate
    - name: postgres-data
      hostPath:
        path: /opt/kine/postgresql/data
        type: DirectoryOrCreate
    - name: etcd-pki
      hostPath:
        path: /etc/kubernetes/pki/etcd/
        type: Directory

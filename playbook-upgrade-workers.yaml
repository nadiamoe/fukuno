- name: Upgrade worker nodes
  # Do not upgrade terabox automatically
  hosts: workers:!storage
  remote_user: root

  # Upgrade hosts one by one
  #strategy: mitogen_host_pinned
  strategy: host_pinned
  serial: 1

  tasks:
    - name: Sync node configuration
      ansible.builtin.shell:
        cmd: kubeadm upgrade node

    - name: Upgrade system
      register: upgraded
      community.general.pacman:
        upgrade: true
        update_cache: true

    - meta: end_host
      when: |
        ('packages' not in upgraded) or (upgraded.packages | length == 0)

    - name: Print upgraded packages
      ansible.builtin.debug:
        var: upgraded.packages

    - meta: end_host
      when: |
        upgraded.packages | intersect(['kubelet', 'cri-o', 'linux', 'linux-lts']) | length == 0

    - name: Wait until DNS is healthy
      delegate_to: "{{ groups['control_plane'][0] }}"
      ansible.builtin.shell:
        cmd: >-
          kubectl wait --timeout="{{ timeout_critical_ready }}" --for=condition=ready -n dnscrypt-proxy pods --all
          && kubectl wait --timeout="{{ timeout_critical_ready }}" --for=condition=ready -n dnsmasq pods --selector=app.kubernetes.io/component=dns

    - name: Cordon and drain node
      delegate_to: "{{ groups['control_plane'][0] }}"
      ansible.builtin.shell:
        cmd: >-
          kubectl cordon "{{ inventory_hostname }}"
          && kubectl drain "{{ inventory_hostname }}" --ignore-daemonsets=true --delete-emptydir-data=true --timeout="{{ timeout_node_drain }}"

    - name: Reboot node
      ansible.builtin.reboot: {}

    - name: Wait for node to be online
      delegate_to: "{{ groups['control_plane'][0] }}"
      ansible.builtin.shell:
        cmd: kubectl wait --for=condition=ready node "{{ inventory_hostname }}" --timeout="{{ timeout_node_ready }}"

    - name: Uncordon node
      delegate_to: "{{ groups['control_plane'][0] }}"
      ansible.builtin.shell:
        cmd: >-
          kubectl uncordon "{{ inventory_hostname }}"
